digraph Platform_services{
    ratio=0.5625
    #ratio=0.7
    #ratio=1.0407 // 1993:1915
    #ratio=1.42
    maxiter=10000
    #compound=true;
    newrank=true
    edge[minlen=1,weight=1]
    node[shape=octagon]
    rankdir=TB // arrows go down

    // customers
    subgraph customers {
      rank=source // topmost always, the source of graph
      node[shape=tab,style=filled,fillcolor=lightgreen]

      subgraph customers_active_commercial {
        HOT           [label="Humanitarian OSM Team",group=hot]
        PDC           [label="Pacific Disaster Center"]
        Kontur        [label="Kontur",group=kontur]
      }

      subgraph customers_active_noncommercial { // active non-commercial engagements
        DonkorLabs    [label="Donkor Labs"]
        HDX           [label="UN OCHA Humanitarian Data Exchange",group=HDX]
        Unfolded      [label="Unfolded / Foursquare"]
        public_event_feed_users [label="Public Event Feed users"]
      }      

      subgraph customers_inactive { //inactive
        style="dashed"
        node[fontcolor=white,fillcolor=darkgrey]
        Tenefit       [label="Tenefit"]
        DonerKing     [label="Doner King",group=donerking]
        mchs          [label="Minsk Emergency Call Center"]
        cartocatalog  [label="Carto Catalog"] //updated 2021-10-08
        Sunbim                  [label="Sunbim (KREO)"]
        //Vianova [label="Vianova"]
        SwissRe                 [label="Swiss Re"] 
      }
    }


    // user facing
    // external
    { // data providers 
        rank=sink; // bottom-most of the graph

        // grouping is just for better clarity, its not architectural

        { // HOT
          hotactivations     [label="HOT Projects",shape=house,style=filled,fillcolor=blue,fontcolor=white]
          hotactivationscsv  [label="HOT Activateions CSV",shape=house,style=filled,fillcolor=blue,fontcolor=white]
        }

        { // Meta
          facebookpopulation [label="Facebook Population (HRSL)",shape=house,style=filled,fillcolor=blue,fontcolor=white]
          facebookroads      [label="Facebook Roads",shape=house,style=filled,fillcolor=blue,fontcolor=white]
          facebook           [label="Facebook",shape=house,style=filled,fillcolor=blue,fontcolor=white]
        }

        { // OSM
          osm                [label="OpenStreetMap.org",shape=house,style=filled,fillcolor=blue,fontcolor=white]
          osmlayers          [label="OpenStreetMap Editor Layer Index",shape=house,style=filled,fillcolor=blue,fontcolor=white]
          osmcommunities     [label="OpenStreetMap Communities Index",shape=house,style=filled,fillcolor=blue,fontcolor=white]
          osmnominatim       [label="OSM Nominatim",shape=house,style=filled,fillcolor=blue,fontcolor=white]
        }

        { //new
          taskingmanagerapi [label="Tasking Manager API",shape=house,style=filled,fillcolor=blue,fontcolor=white] //new
          firms             [label="FIRMS",shape=house,style=filled,fillcolor=blue,fontcolor=white] //new
          noaa              [label="NOAA",shape=house,style=filled,fillcolor=blue,fontcolor=white] //new
          emdat             [label="EM-DAT",shape=house,style=filled,fillcolor=blue,fontcolor=white] //new
          japantornado      [label="Japan Tornado",shape=house,style=filled,fillcolor=blue,fontcolor=white] //new??
          firehydrants      [label="Fire Hydrants",shape=house,style=filled,fillcolor=blue,fontcolor=white] //new
        }


        { // Ukraine
          unhcrukrainerefugee [label="UNHCR Ukraine Refugee",shape=house,style=filled,fillcolor=blue,fontcolor=white]
          idpestimates [label="Ukraine: IDP Estimates",shape=house,style=filled,fillcolor=blue,fontcolor=white]
        }

        { // other
          msbuildings        [label="Microsoft Buildings",shape=house,style=filled,fillcolor=blue,fontcolor=white]
          geoalertbuildings  [label="GeoAlert Buildings",shape=house,style=filled,fillcolor=blue,fontcolor=white]
          gdacs              [label="GDACS",shape=house,style=filled,fillcolor=blue,fontcolor=white]
          ghs                [label="GHSL Global Human Settlement",shape=house,style=filled,fillcolor=blue,fontcolor=white]
          gadm               [label="gadm.org",shape=house,style=filled,fillcolor=blue,fontcolor=white]
          jrc                [label="European Commission Joint Research Center",shape=house,style=filled,fillcolor=blue,fontcolor=white]
          linz               [label="LINZ (Land Information New Zealand)",shape=house,style=filled,fillcolor=blue,fontcolor=white]
          pdcdisasters       [label="PDC Disaster feed",shape=house,style=filled,fillcolor=blue,fontcolor=white]
          wikidata           [label="Wikidata",shape=house,style=filled,fillcolor=blue,fontcolor=white]
        }
    }

    "layers-db" -> taskingmanagerapi
    "kcdataetl" -> taskingmanagerapi

    {
        rank=same
        OSM_quality_report [label=<OSM Quality Report<BR /><FONT POINT-SIZE="10">ask: Andrei Valasiuk<BR />quality reports on DN2</FONT>>,shape=rectangle,style=filled,fillcolor=lightskyblue]
        k2routing [label=<k2routing<BR />proxy request to OSRM>,style=filled,fillcolor=deeppink]
        k2layers[style=filled, fillcolor=deeppink]
        k2geocoder[style=filled,fillcolor=deeppink]
    }

    subgraph cluster_legend {
        label="Legend"
        {
            rank=same;
            "Partners/users" [shape=tab,style=filled,fillcolor=green]
            "Data Providers" [shape=house,style=filled,fillcolor=blue]
            "Will be implemented" [color=orange]
            "Will be removed in the future" [color=purple]
        }

        {
            "user/partner"[shape=tab,style=filled,fillcolor=green]
            "user application"[shape=ellipse]
            "interactive service"[style=filled,fillcolor=red] 
            "interactive backend"[style=filled,fillcolor=red] 
            "interactive dataset"[shape=rectangle,style=filled,fillcolor=skyblue,fontcolor=red] 
            "interactive database"[shape=cylinder,style=filled,fillcolor=skyblue,fontcolor=red] 
            "noninteractive dataset"[shape=rectangle,style=filled,fillcolor=skyblue] 
            "data provider"[shape=house,style=filled,fillcolor=blue] 
            "etl service"
            "obsoleted interactive service"[style=filled,fillcolor=deeppink] 
            "user/partner"->"user application"
            "user application" -> "interactive service"
            "user application" -> "obsoleted interactive service"
            "interactive service" -> "interactive backend"[color=red]
            "obsoleted interactive service" -> "interactive backend"[color=red]
            "interactive backend" -> "interactive dataset"[color=red]
            "interactive backend" -> "interactive database"[color=red]
            "interactive backend" -> "data provider"[color=blue]
            "etl service" -> "interactive dataset"
            "etl service" -> "interactive database"
            "etl service" -> "noninteractive dataset"

        }

        {
            rank=same;
            "Existing entity" [color=black]
            database [label=<Database>,shape=cylinder,color=black]
            "Existing entity" -> database
            dataset [label=<Dataset>,shape=rectangle,style=filled,fillcolor=lightskyblue,color=black]
            "Existing entity" -> dataset
            service [label=<Service>,shape=octagon,color=black]
            "Existing entity" -> service
            library [label=<library>,shape=parallelogram,color=black]
            "Existing entity" -> library
            container [label=<container>,shape=pentagon,color=black]
            "Existing entity" -> container
            ellipse [label=<application>,shape=ellipse,color=black]
            "Existing entity" -> ellipse
        }

        {
            outdated [label=<Outdated entity<BR /><FONT POINT-SIZE="10">Keeped for history reasons</FONT>>,style=dashed]
            another_entity [shape=octagon]
            outdated -> another_entity [label="outdated edge",style=dashed]
        }        
    }

    subgraph kontur_infrastructure {

      subgraph cluster_k8s {
          label="k8s cluster"
          style=bold


          subgraph observatibility_tools {
            "prometheus02" [label=<prometheus02<BR /><FONT POINT-SIZE="10">ask: Eugene Karpach<BR />collects cluster/app metrics in K8S<BR />K8S</FONT>>]
            "grafana02" [label=<grafana02<BR /><FONT POINT-SIZE="10">ask: Eugene Karpach<BR />main monitoring solution in K8S<BR />K8S</FONT>>]
          }

          "nginx-ingress-controller" [label=<nginx-ingress-controller<BR /><FONT POINT-SIZE="10">ask: Eugene Karpach<BR />reverse proxy and load balancer<br/>K8S</FONT>>,style=filled,fillcolor=red]
          "disaster-ninja-be" [label=<disaster-ninja-be<BR /><FONT POINT-SIZE="10">Platform backend<BR />ask: Palina Krukovich<BR />Open Source<BR />K8S</FONT>>,style=filled,fillcolor=red,group=ninja]
          "disaster-ninja-fe" [label=<disaster-ninja-fe<BR /><FONT POINT-SIZE="10">ask: Viachaslau Kozel<BR />K8S<BR />Open Source</FONT>>,style=filled,fillcolor=red,group=ninja]
          
          "event-preview-image-generator" [label=<event-preview-image-generator<BR /><FONT POINT-SIZE="10">Preview generator for platform links integration<BR />K8S</FONT>>,style=filled,fillcolor=red,group=ninja]
          
          "layers-tiles-api" [label=<Layers Tiles API<BR /><FONT POINT-SIZE="10">ask: Andrei Valasiuk<BR />tiles API of Layers-DB<BR />K8S</FONT>>,
                                        style=filled,fillcolor=red]
          "Layers-API" [label=<Layers API<BR /><FONT POINT-SIZE="10">ask: Andrei Valasiuk<BR />OGC-API of Layers-DB<BR />K8S</FONT>>,
                                        style=filled,fillcolor=red]
          "user-profile-api" [label=<user-profile-api<FONT POINT-SIZE="10"><BR />ask: Palina Krukovich<BR />user management service API<BR />K8S</FONT>>,
                                        style=filled,fillcolor=red]
          "user-profile-api-database" [label=<user-profile-api-database<FONT POINT-SIZE="10"><BR />ask: Palina Krukovich<BR />store application settings for users<BR />K8S</FONT>>,
                                        shape=cylinder,style=filled,fillcolor=red]
          "user-profile-spi-plugin" [label=<user-profile-spi-plugin<FONT POINT-SIZE="10"><BR />ask: Aliaksandr Kolesen<BR />K8S</FONT>>,style=filled,fillcolor=red]
          insightsapi [label=<Insights API<BR /><FONT POINT-SIZE="10">ask: Palina Krukovich<BR />service to calculate analytics for geometry<BR />K8S</FONT>>,
                                style=filled,color=red]
          graphqlapi [label=<GraphQL API<BR /><FONT POINT-SIZE="10">ask: Palina Krukovich<BR />service to calculate analytics for geometry<BR />K8S</FONT>>,
                                style=filled,color=red]
          "fluent-bit" [label=<fluent-bit<FONT POINT-SIZE="10"><BR />ask: Eugene Karpach<BR />collects all logs in K8S<BR />K8S</FONT>>]
          "layers-db" [label=<Layers-DB<BR /><FONT POINT-SIZE="10">ask: Andrei Valasiuk<BR />serve layers for applications<BR />K8S</FONT>>,
                                style=filled,fillcolor=red]
          "layers-db-database" [label=<Layers-DB database<BR /><FONT POINT-SIZE="10">ask: Andrei Valasiuk<BR />store layers for web-applications<BR />K8S</FONT>>,
                                shape=cylinder,style=filled,fillcolor=red]
          "layers-etl" [label=<Layers-DB ETL<BR /><FONT POINT-SIZE="10">ask: Andrei Valasiuk<BR />prepare data for layers from Layers DB</FONT>>]
          "insights-db" [label=<insights-db<BR /><FONT POINT-SIZE="10">ask: Nadzeya Laptsik<BR />Insights API orchestrator<BR />K8S</FONT>>]
          "insights-llm-api" [label=<insights-llm-api<BR /><FONT POINT-SIZE="10">ask: Nadzeya Laptsik<BR />service providing analytics from LLM<BR />K8S</FONT>>,
                                      style=filled,fillcolor=red]
          eventapi [label=<eventapi<BR /><FONT POINT-SIZE="10">ask: Palina Krukovich<BR />disasters events API</FONT>>,group=eventapidata,style=filled,fillcolor=red]
          keycloak [label=<keykloak<BR /><FONT POINT-SIZE="10">ask: Eugene Karpach<BR />Identity and access management<BR />Open Source<BR />K8S</FONT>>,style=filled,fillcolor=red]
          "insightsapi-database" [label=<InsightsAPI-database<FONT POINT-SIZE="10"><BR />ask: Andrei Valasiuk<BR />store hexagonized datasets<BR />K8S</FONT>>,
                                      shape=cylinder,style=filled,fillcolor=red]

      }
      
      subgraph cluster_geocint {
          label=<Geocint ETL pipeline<BR /><FONT POINT-SIZE="10">ask: Andrei Valasiuk</FONT>>
          style=bold
          //rank=none

          "geocint-runner" [label=<geocint-runner<BR /><FONT POINT-SIZE="10">ask: Andrei Valasiuk<BR />core part<BR />open source</FONT>>]
          "geocint-openstreetmap" [label=<geocint-openstreetmap<BR /><FONT POINT-SIZE="10">ask: Andrei Valasiuk<BR />OSM-related targets<BR />open source</FONT>>]
          "geocint-kontur" [label=<geocint-kontur<BR /><FONT POINT-SIZE="10">ask: Andrei Valasiuk<BR />Kontur's private part</FONT>>]
          geocint [label=<Geocint Pipeline<BR /><FONT POINT-SIZE="10">ask: Andrei Valasiuk<BR />Kontur's data pipeline</FONT>>]
          isochroneapi [label=<IsochroneAPI<BR /><FONT POINT-SIZE="10">ask: Andrei Valasiuk</FONT>>]

          {
              rank=same;
              osrmemergencyminsk [label=<osrmemergencyminsks<BR /><FONT POINT-SIZE="10">ask: Darafei Praliakouski</FONT>>,shape=pentagon,style=filled,fillcolor=red]
              osrmdistanceminsk [label=<osrmdistanceminsks<BR /><FONT POINT-SIZE="10">ask: Darafei Praliakouski</FONT>>,shape=pentagon,style=filled,fillcolor=red]
              osrmdocker_motobike [label=<osrmdocker_motobike<BR /><FONT POINT-SIZE="10">ask: Andrei Valasiuk<BR />geocint-based osrm backend</FONT>>,shape=pentagon,style=filled,fillcolor=red]
              osrmdocker_foot [label=<osrmdocker_foot<BR /><FONT POINT-SIZE="10">ask: Andrei Valasiuk<BR />geocint-based osrm backend</FONT>>,shape=pentagon,style=filled,fillcolor=red]
              osrmdocker_emergency [label=<osrmdocker_emergency<BR /><FONT POINT-SIZE="10">ask: Andrei Valasiuk<BR />geocint-based osrm backend</FONT>>,shape=pentagon,style=filled,fillcolor=red]
              osrmdocker_bicycle [label=<osrmdocker_bicycle<BR /><FONT POINT-SIZE="10">ask: Andrei Valasiuk<BR />geocint-based osrm backend</FONT>>,shape=pentagon,style=filled,fillcolor=red]
              osrmdocker_car [label=<osrmdocker_car<BR /><FONT POINT-SIZE="10">ask: Andrei Valasiuk<BR />geocint-based osrm backend</FONT>>,shape=pentagon,style=filled,fillcolor=red]
          }

          {
              // Global datasets
              //rank=same;
          
              osmroadsegments [label=<OSM Road Segments<BR /><FONT POINT-SIZE="10">ask: Andrei Valasiuk</FONT>>,shape=rectangle,style=filled,fillcolor=lightskyblue,fontcolor=red]
              konturpopulation [label=<Kontur Population<BR /><FONT POINT-SIZE="10">ask: Andrei Valasiuk</FONT>>,shape=rectangle,style=filled,fillcolor=lightskyblue,fontcolor=red]
              kontur_boundaries [label=<Kontur Boundaries<BR /><FONT POINT-SIZE="10">ask: Andrei Valasiuk<BR />global boundary dataset</FONT>>,
                                      shape=rectangle,style=filled,fillcolor=lightskyblue,color=red,fontcolor=red]
              osmcontributorstiles [label=<OSM Active Contributors<BR /><FONT POINT-SIZE="10">ask: Andrei Valasiuk</FONT>>,shape=rectangle,style=filled,fillcolor=lightskyblue]
          }

          {
              // Minsk datasets
              //rank=same;
              addressesminsk [label=<OSM Addresses Minsk<BR /><FONT POINT-SIZE="10">ask: Andrei Valasiuk<BR />Adresses for Minskfire routing</FONT>>,shape=rectangle,style=filled,fillcolor=lightskyblue    ]
              buildingsminsk [label=<OSM Buildings Minsk<BR /><FONT POINT-SIZE="10">ask: Andrei Valasiuk<BR />Buildings for Minskfire routing</FONT>>,
                shape=rectangle,style=filled,fillcolor=lightskyblue,fontcolor=red]
              belarusosmpbf [label=<OSM Belarus extract<BR /><FONT POINT-SIZE="10">ask: Andrei Valasiuk</FONT>>,shape=rectangle,style=filled,fillcolor=lightskyblue,fontcolor=red]
              pdsdataset  [label=<OSM_extract_Belarus_Kosovo_UAE_USA<BR />Geocint-based OSRM backend<BR /><FONT POINT-SIZE="10">ask: Andrei Valasiuk</FONT>>,
                shape=rectangle,style=filled,fillcolor=lightskyblue,fontcolor=red]//Area of interest updated 2024-30-01
          }
      } 

    }

    Kontur->prometheus02[style=invis] // prevent prometheus from being considered 'source', popping whole graph up

    k2geocoder -> osmnominatim [color=purple]

    "user-profile-api" -> "user-profile-api-database"[color=red]
    "user-profile-spi-plugin" -> "user-profile-api-database"[color=red]

    keycloak -> "user-profile-spi-plugin"[color=red]
    eventapi -> keycloak[color=red]

    "basemap tiles"  [label=<basemap tiles<BR /><FONT POINT-SIZE="10">ask: Darafei Praliaskouski</FONT>>][style=filled,fillcolor=red]
    "disaster-ninja-fe" -> "basemap tiles"[color=red] 
    "basemap tiles" -> geocint

    "disaster-ninja-fe" ->  "disaster-ninja-be"[color=red]
    "disaster-ninja-fe" -> kontur_boundaries[color=red]
    "disaster-ninja-fe" -> OSM_quality_report
    "disaster-ninja-fe" -> "layers-tiles-api"[color=red]

    "disaster-ninja-be" -> "user-profile-api"[color=red]
    "disaster-ninja-be" -> "event-preview-image-generator"[color=red]
    "event-preview-image-generator" -> "disaster-ninja-fe"[color=red]
    "disaster-ninja-be" -> insightsapi[color=red]
    "disaster-ninja-fe" -> insightsapi[color=red]
    "disaster-ninja-be" -> "insights-llm-api"[color=red]
    graphqlapi -> insightsapi[color=red]
    "disaster-ninja-be" -> kcapi[color=red]
    "disaster-ninja-be" -> eventapi[color=red]
    "disaster-ninja-be" -> "Layers-API"[color=red]

    "HOT Slack" -> "disaster-ninja-be"[color=red] // should be to ingress controller, maybe...

    "nginx-ingress-controller" -> "disaster-ninja-fe"[color=red] 
    "nginx-ingress-controller" -> "disaster-ninja-be" [color=red]

    SwissRe -> geoalertbuildings [style=dashed]
    SwissRe -> eventapiprod [style=dashed]

    "Layers-API" -> "layers-db"[color=red]
    "layers-tiles-api" -> "layers-db-database"[color=red]
    "layers-db" -> "layers-etl"
    "layers-db" -> "layers-db-database"[color=red]
    "layers-db-database" -> "layers-etl"

    "layers-etl" -> hotactivations
    "layers-etl" -> osmcontributorstiles
    "layers-etl" -> unhcrukrainerefugee
    "layers-etl" -> idpestimates
    "layers-etl" -> osmlayers
    

    gdacs -> jrc
    ghs -> jrc
    facebookpopulation -> facebook
    facebookroads -> facebook


    { // client apps
        rank=same;
        donerkingapp [label="apps.kontur.io/donerking/",group="donerking",shape=ellipse]        
        // deeppink = interactive/outdated?
        eventapiprod [label=<apps.kontur.io/events/<BR /><FONT POINT-SIZE="10">API endpoint with events<BR />ask: Palina Krukovich</FONT>>,style=filled,fillcolor=deeppink]
        mchsapp [label="apps.kontur.io/firebrigade/minsk/",shape=ellipse,group="firebrig"]
        konturwebsite [label="kontur.io/",shape=ellipse,group=konturwebsite]

        {
          hotlandingpage [label="apps.kontur.io/hot-activations-landing/",shape=ellipse,group="hot"]
          "HOT Slack" [group="hot"]
          oam [label=<new.openaerialmap.org/<BR /><FONT POINT-SIZE="10">Demo application of OAM new version</FONT>>,shape=ellipse,group="hot"]
        }

        disasterninja [label="disaster.ninja/",shape=ellipse]
       
        { 
          roadqualityapp [label=<Road quality mobile app<BR /><FONT POINT-SIZE="10">ask: Andrei Valasiuk</FONT>>,shape=ellipse,group="donkor"]
          smartcity [label=<Smart City App<BR />maps.kontur.io>,shape=ellipse,group="donkor"]
        }

        solarfarm [label=<Solar Farms marketing App<BR /><FONT POINT-SIZE="10">ask: Andrei Valasiuk</FONT>>,shape=ellipse]
        embeddedpop [label=<Kontur Population marketing App<BR /><FONT POINT-SIZE="10">ask: Andrei Valasiuk</FONT>>,shape=ellipse,group="HDX"]
        embeddeddisaster [label=<Embedded disaster App<BR /><FONT POINT-SIZE="10">ask: Andrei Valasiuk</FONT>>,shape=ellipse]
    }
    disasterninja -> "nginx-ingress-controller"
    disasterninja -> keycloak[color=red]
    Sunbim -> solarfarm

    embeddedpop -> disasterninja
    embeddeddisaster -> disasterninja
    oam -> disasterninja

    DonkorLabs -> smartcity -> disasterninja
    DonkorLabs -> roadqualityapp -> keycloak[color=red]

    roadqualityapp -> "layers-db"[color=red]
    solarfarm -> disasterninja


    public_event_feed_users -> keycloak[color=red]
    public_event_feed_users -> eventapi[color=red]
    HOT -> disasterninja
    HOT -> hotlandingpage //new
    HOT -> "HOT Slack"
    HOT -> oam
    HOT -> graphqlapi[color=red]
    Kontur -> solarfarm
    Kontur -> embeddeddisaster
    
    "Unfolded Data Catalog"[style=filled,fillcolor=red]
    Unfolded -> "Unfolded Data Catalog"[color=red] //updated 2021-10-08
    "Unfolded Data Catalog" -> "basemap tiles"[color=red] //updated 2021-10-08

    "13 months of Fires" [label=<13 months of Fires>,shape=rectangle,style=filled,fillcolor=lightskyblue]
    cartocatalog -> "13 months of Fires"//updated 2021-10-08
    cartocatalog -> geocint //updated 2021-10-08

    eventapiprod -> eventapi[color=deeppink]
    hotlandingpage -> kcapi //new
    CSTAPP [label=<City Split Tool app<BR /><FONT POINT-SIZE="10">ask: Tigran Grigoryan</FONT>>,style=filled,fillcolor=red]
    mchs -> CSTAPP[color=purple]
    DonerKing -> CSTAPP [color=purple]
    citysplit [label="platform/city-split"][label=<platform/city-split<BR /><FONT POINT-SIZE="10">ask: Tigran Grigoryan</FONT>>][style=filled,fillcolor=red]

    CSTAPP -> citysplit[color=red]
    isochroneapi[style=filled,fillcolor=red]
    citysplit -> isochroneapi[color=red]
    insightsapi -> "insightsapi-database"[color=red]
    "insights-db" -> "insightsapi-database"
    "insights-llm-api" -> "insightsapi-database"[color=red]
    "insights-llm-api" -> "user-profile-api"[color=red]
    "insights-llm-api" -> insightsapi[color=red]
    
    konturpopulation -> insightsapi[color=red] // updated 2021-10-08
    isochroneapi -> insightsapi[color=red] //new

    eventapi -> insightsapi[color=red] //new
    isochroneapi -> osmroadsegments[color=red]
    osmroadsegments -> geocint
    buildingsminsk -> geocint
    osmcontributorstiles -> geocint
    addressesminsk -> geocint
    insightsapi -> geocint
    belarusosmpbf -> geocint
    pdsdataset -> geocint //updated 2021-10-08
    osrmdocker_foot -> pdsdataset[color=red] //updated 2021-10-08
    osrmdocker_bicycle -> pdsdataset[color=red] //updated 2021-10-08
    osrmdocker_car -> pdsdataset[color=red] //updated 2021-10-08
    osrmdocker_emergency -> pdsdataset[color=red] //updated 2021-10-08
    osrmdocker_motobike -> pdsdataset[color=red] //updated 2021-10-08
    isochroneapi -> osrmdocker_foot[color=red]  //updated 2021-10-08
    isochroneapi -> osrmdocker_bicycle[color=red] //updated 2021-10-08
    isochroneapi -> osrmdocker_car[color=red] //updated 2021-10-08
    isochroneapi -> osrmdocker_emergency[color=red] //updated 2021-10-08
    isochroneapi -> osrmdocker_motobike[color=red]   //updated 2021-10-08

    osrmemergencyminsk -> belarusosmpbf[color=red]
    osrmdistanceminsk -> belarusosmpbf[color=red]
    konturpopulation -> geocint
    HDX -> konturpopulation[color=red]
    HDX -> kontur_boundaries[color=red]
    HDX -> embeddedpop



    "geocint-runner" -> geocint
    "geocint-openstreetmap" -> geocint
    "geocint-kontur" -> geocint
    "Layers-API" -> geocint
    geocint -> osm
    geocint -> facebookpopulation
    facebookpopulation -> gadm
    geocint -> gadm
    geocint -> ghs
    geocint -> facebookroads
    geocint -> msbuildings
    geocint -> geoalertbuildings
    geocint -> wikidata
    geocint -> linz

    "insightsapi-database" -> geocint
    kontur_boundaries -> geocint //updates 2021-10-08
    OSM_quality_report -> geocint //updated 2021-10-08 Sasha Petrov
    osmboundaries[style=filled,fillcolor=deeppink]
    osmboundaries -> geocint

    kccitysplitfe [label=<kccitysplitfe<BR /><FONT POINT-SIZE="10">ask: Darafei Praliaskouski</FONT>>,color=purple,style=filled,fillcolor=deeppink]
    kccitysplitfe -> isochroneapi [color=purple]
    CSTAPP -> kccitysplitfe [color=purple]

    // lets use deeppink for outdated+interactive
    kcapi [label=<kcapi<BR /><FONT POINT-SIZE="10">ask: Darafei Praliaskouski</FONT>>,color=purple,style=filled,fillcolor=deeppink]
    eventapi -> gdacs[color=blue]
    eventapi -> firms[color=blue] //new
    eventapi -> noaa[color=blue] //new
    eventapi -> emdat[color=blue] //new
    eventapi -> japantornado[color=blue] //new
    eventapi -> kcapi[color=red]

    // donerking legacy stack
    kcdonerkingfe [color=purple,group="donerking",style=filled,fillcolor=deeppink]
    kcdonerking [color=purple,group="donerking",style=filled,fillcolor=deeppink]

    DonerKing -> donerkingapp
    donerkingapp -> kcdonerkingfe [color=purple]
    kcdonerkingfe -> kcdonerking [color=purple]
    kcdonerking -> buildingsminsk [color=purple]
    kcdonerking -> kcdataetl [color=purple]


    kcdataetl [color=purple]
    kcdataetl -> hotactivations [color=purple]
    kcdataetl -> hotactivationscsv [color=purple]
    kcdataetl -> osmcommunities [color=purple]
    kcdataetl -> osmlayers [color=purple]
    kcdataetl -> k2etl [color=purple]
    kcdataetl -> osmboundaries [color=purple]
    kcdataetl -> firehydrants [color=purple]
   
    // firebrig stack  
    kcfirebrigadefe [color=purple, group="firebrig",style=filled,fillcolor=deeppink]
    kcfirebrigade [color=purple, group="firebrig",style=filled,fillcolor=deeppink]
    mchs -> mchsapp
    mchsapp -> kcfirebrigadefe [color=purple]
    kcfirebrigadefe -> kcfirebrigade [color=purple]
    kcfirebrigade -> kcdataetl [color=purple]

    kcapi [color=purple]
    kcdonerking -> kcapi [color=purple]
    kcfirebrigade -> kcapi [color=purple]

    pdcsqs [label=<PDC SQS Feed<BR /><FONT POINT-SIZE="10">ask: Palina Krukovich<BR />Simple Queue Service</FONT>>]
    
    eventapi -> pdcsqs -> pdcdisasters
    eventapi -> pdcmapservices -> pdcdisasters


    k2etl [color=purple]
    k2layers [color=purple]
    k2layers [color=purple]
    kcapi -> k2layers [color=purple]
    "kcapi db" [label=<kcapi db<BR /><FONT POINT-SIZE="10">Internal db that stores layers, geocoder</FONT>>,color=purple,shape=cylinder,style=filled,fillcolor=deeppink]
    k2layers -> "kcapi db" [color=purple]
    k2geocoder -> "kcapi db" [color=purple]
    "kcapi db" -> kcdataetl [color=purple]
    minskfiredemo 
    k2routing [color=purple]
    kcapi -> k2routing [color=purple]
    k2routing -> osm [color=purple]
    k2routing -> osrmemergencyminsk [color=purple]
    k2routing -> osmboundaries [color=purple] // accoring to A.Kalenik
    osrmemergencyminsk -> osm[color=blue]
    k2routing -> osrmdistanceminsk [color=purple]
    osrmdistanceminsk -> osm[color=blue]
    k2geocoder [color=purple]
    kcapi -> k2geocoder [color=purple]
    k2geocoder -> osm [color=purple]
    k2geocoder -> kcdataetl [color=purple]
    k2frontend [color=purple]
    kcdonerkingfe -> k2frontend [color=purple]
    kcfirebrigadefe -> k2frontend [color=purple]
    kccitysplitfe -> k2frontend [color=purple]

    subgraph cluster_PDC {
        label=<PDC<BR /><FONT POINT-SIZE="10">ask: Anastasia Artyukevich</FONT>>
        style=bold

        pdcrvaeditorfe        
        pdceventbrieffe        
        pdchazardbrief        
        pdcdas        
        pdctrafficcams 
        DASv4          
        UserManagement
        DisasterAware7
        pdccmdp   
        OrgAPI
        JWT
    }
    
    PDC -> pdcrvaeditorfe
    PDC -> pdceventbrieffe
    pdceventbrieffe -> pdcdisasters
    pdceventbrieffe -> pdcrvaeditorfe
    PDC -> pdchazardbrief
    pdchazardbrief -> pdcdas
    pdchazardbrief -> pdcdisasters
    PDC -> pdcdas
    pdcdas -> pdcdisasters
    PDC -> pdctrafficcams
    pdceventbrieffe -> pdctrafficcams
    PDC -> pdccmdp -> pdctrafficcams
    Tenefit -> OrgAPI // update 2021-10-8
    PDC -> UserManagement -> JWT         // update 2021-10-8
    UserManagement -> OrgAPI // update 2021-10-8
    PDC -> DisasterAware7 -> JWT -> OrgAPI // update 2021-10-8
    PDC -> DASv4 // update 2021-10-8
    Tenefit -> DASv4 // update 2021-10-8
    Kontur -> DASv4 // update 2021-10-8

    // konturwebsite stack
    wordpress [label=<Wordpress<BR /><FONT POINT-SIZE="10">ask: Aleksey Tarakanov</FONT>>,group=konturwebsite]
    mailchimp [group=konturwebsite]
    Kontur -> konturwebsite -> wordpress -> mailchimp
    mailchimp -> keycloak [color=orange]


    "prometheus02" -> grafana02
    kibana [label=<Kibana/ElasticCloud<BR /><FONT POINT-SIZE="10">ask: Anastasia Artyukevich<BR />Data visualization dashboard for Elasticsearch</FONT>>]
    
    Kontur -> grafana02
    
    Kontur -> kibana //updated 2021-10-08
    eventapi -> kibana//updated 2021-10-08
    isochroneapi -> kibana//updated 2021-10-08
    
    "fluent-bit" -> kibana

}
