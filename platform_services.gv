digraph Platform_services{
    #ratio=auto
    ratio=0.5625
    #ratio=0.7
    #ratio=1.0407 // 1993:1915
    #ratio=1.42
    maxiter=10000
    #compound=true;
    newrank=true
    edge[minlen=1,weight=1]
    node[shape=octagon]
    rankdir=TB // arrows go down

    // customers
    subgraph customers {
      rank=source // topmost always, the source of graph
      node[shape=tab,style=filled,fillcolor=lightgreen]

      subgraph customers_active_commercial {
        HOT           [label="Humanitarian OSM Team",group=hot]
        PDC           [label="Pacific Disaster Center"]
        Kontur        [label="Kontur",group=kontur]
      }

      subgraph customers_active_noncommercial { // active non-commercial engagements
        DonkorLabs    [label="Donkor Labs"]
        HDX           [label="UN OCHA Humanitarian Data Exchange",group=HDX]
        Unfolded      [label="Unfolded / Foursquare",group=Unfolded]
        public_event_feed_users [label="Public Event Feed users"]
      }      

      subgraph customers_inactive { //inactive
        style="dashed"
        node[fontcolor=white,fillcolor=darkgrey]
        Tenefit       [label="Tenefit"]
        DonerKing     [label="Doner King",group=donerking]
        mchs          [label="Minsk Emergency Call Center"]
        cartocatalog  [label="Carto Catalog"] //updated 2021-10-08
        Sunbim                  [label="Sunbim (KREO)"]
        //Vianova [label="Vianova"]
        SwissRe                 [label="Swiss Re"] 
      }
    }


    // user facing
    // external
    subgraph data_providers {

        // grouping is just for better clarity, its not architectural
        node[shape=house,style=filled,fillcolor=blue,fontcolor=white]

        { // floating

          taskingmanagerapi [label="Tasking Manager API"] //new

          subgraph eventapi_sources {
            node[group=events_components]
            firms             [label="FIRMS"] //new
            noaa              [label="NOAA"] //new
            emdat             [label="EM-DAT"] //new
            japantornado      [label="Japan Tornado"] //new??
            gdacs             [label="GDACS"]
          }

          jrc               [label="European Commission Joint Research Center"]


          subgraph kc_sources {
            node[group=kcetl]
            firehydrants      [label="Fire Hydrants"] //new
            hotactivationscsv  [label="HOT Activateions CSV"]
            osmcommunities     [label="OpenStreetMap Communities Index"]
            osmnominatim       [label="OSM Nominatim"]
          }
          
          subgraph data_providers_ukraine { // Ukraine
            // rank = same
            node[group=layers_components]
            unhcrukrainerefugee [label="UNHCR Ukraine Refugee"]
            idpestimates [label="Ukraine: IDP Estimates"]
          }
          
          subgraph data_providers_hot {
            //rank = same
            hotactivations     [label="HOT Projects"]
          }
          
          subgraph data_providers_osm { 
            //rank = same
            osm                [label="OpenStreetMap.org"]
            osmlayers          [label="OpenStreetMap Editor Layer Index"]
          }

        }


        { // sinked, bottom-most of the graph
          rank=sink;

          pdcdisasters       [label="PDC Disaster feed"]

          subgraph data_providers_meta {
            //rank = same
            facebookpopulation [label="Facebook Population (HRSL)"]
            facebookroads      [label="Facebook Roads"]
            facebook           [label="Facebook"]
          }

            



          { // other
            // rank = same
            msbuildings        [label="Microsoft Buildings"]
            geoalertbuildings  [label="GeoAlert Buildings"]
            ghs                [label="GHSL Global Human Settlement"]
            gadm               [label="gadm.org"]
            linz               [label="LINZ (Land Information New Zealand)"]
            wikidata           [label="Wikidata"]
          }

      }
    }

    "layers-db" -> taskingmanagerapi
    "kcdataetl" -> taskingmanagerapi


    subgraph cluster_legacy {
        //label = "KC legacy stack / wilderness"  // not exactly legacy  -- rather everything not in k8s?
        //style=dashed
   

        node[style=filled,fillcolor=deeppink,group=kclegacy]
       
        // it belongs here logically 
        osmboundaries[style=filled,fillcolor=deeppink]

        {
          node[group=kc]
          kcapi [label=<kcapi<BR /><FONT POINT-SIZE="10">ask: Darafei Praliaskouski</FONT>>,color=purple]
          "kcapi db" [label=<kcapi db<BR /><FONT POINT-SIZE="10">Internal db that stores layers, geocoder</FONT>>,color=purple,shape=cylinder]
          kcdataetl [color=purple,group=kcetl]
        }


        { 
          node[group=k2] 
          k2frontend[color=purple]
          k2routing [label=<k2routing<BR />proxy request to OSRM>]
          k2geocoder
          k2etl [color=purple]
          k2layers[color=purple]
        }

        {
          node[group=firebrig]
          kcfirebrigadefe [color=purple, group="firebrig",style=filled,fillcolor=deeppink]
          kcfirebrigade [color=purple, group="firebrig",style=filled,fillcolor=deeppink]
        }

        { 
          node[group=donerking]
          kcdonerkingfe [color=purple,style=filled,fillcolor=deeppink]
          kcdonerking [color=purple,style=filled,fillcolor=deeppink]
        }

    
        { 
          node[group=citysplit]
          kccitysplitfe [label=<kccitysplitfe<BR /><FONT POINT-SIZE="10">ask: Darafei Praliaskouski</FONT>>,color=purple,style=filled,fillcolor=deeppink]
        }
    }
        
    citysplit [label="platform/city-split"][label=<platform/city-split<BR /><FONT POINT-SIZE="10">ask: Tigran Grigoryan</FONT>>][style=filled,fillcolor=red]
    OSM_quality_report [label=<OSM Quality Report<BR /><FONT POINT-SIZE="10">ask: Andrei Valasiuk<BR />quality reports on DN2</FONT>>,shape=rectangle,style=filled,fillcolor=lightskyblue]

    subgraph cluster_legend {
        label="Legend"
        {
            //rank=same;
            //"Partners/users" [shape=tab,style=filled,fillcolor=green]
            //"Data Providers" [shape=house,style=filled,fillcolor=blue]
            "Will be implemented" [color=orange]
            //"Will be removed in the future" [style=filled,fillcolor=purple]
        }

        {
            "user/partner"[shape=tab,style=filled,fillcolor=green]
            "user application"[shape=ellipse]
            "third-party service"[color="#00000075",fontcolor="#00000075"]
            "interactive service"[style=filled,fillcolor=red] 
            "interactive backend"[style=filled,fillcolor=red] 
            "interactive database"[shape=cylinder,style=filled,fillcolor=skyblue,fontcolor=red] 
            "some dataset"[shape=rectangle,style=filled,fillcolor=skyblue] 
            "data provider"[shape=house,style=filled,fillcolor=blue] 
            "etl service"
            "obsoleted interactive service"[style=filled,fillcolor=deeppink] 
            "user/partner"->"user application"
            "user application" -> "interactive service"
            "third-party service" -> "interactive service"
            "user application" -> "obsoleted interactive service"
            "interactive service" -> "interactive backend"[color=red]
            "obsoleted interactive service" -> "interactive backend"[color=red]
            "interactive backend" -> "some dataset"[color=red]
            "interactive backend" -> "interactive database"[color=red]
            "interactive backend" -> "data provider"[color=blue]
            "etl service" -> "some dataset"
            "etl service" -> "interactive database"

        }

        {
            //rank=same;
            "Existing entity" [color=black]
            database [label=<Database>,shape=cylinder,color=black]
            "Existing entity" -> database
            dataset [label=<Dataset>,shape=rectangle,style=filled,fillcolor=lightskyblue,color=black]
            "Existing entity" -> dataset
            service [label=<Service>,shape=octagon,color=black]
            "Existing entity" -> service
            library [label=<library>,shape=parallelogram,color=black]
            "Existing entity" -> library
            container [label=<container>,shape=pentagon,color=black]
            "Existing entity" -> container
            ellipse [label=<application>,shape=ellipse,color=black]
            "Existing entity" -> ellipse
            service -> "Will be implemented"[color=orange]
        }

        {
            outdated [label=<Outdated entity<BR /><FONT POINT-SIZE="10">Keeped for history reasons</FONT>>,style=dashed]
            another_entity [shape=octagon]
            outdated -> another_entity [label="outdated edge",style=dashed]
        }        
    }

    subgraph kontur_infrastructure {

      subgraph cluster_k8s {
          label="k8s cluster"
          style=bold

          subgraph interactive_workloads {

            node[style=filled,fillcolor=red]
         
            subgraph iw_ingress{
              "nginx-ingress-controller" [label=<nginx-ingress-controller<BR /><FONT POINT-SIZE="10">ask: Aliaksandr Kolesen<BR />reverse proxy and load balancer<br/>K8S</FONT>>]

              "disaster-ninja-be" [label=<disaster-ninja-be<BR /><FONT POINT-SIZE="10">Platform backend<BR />ask: Palina Krukovich<BR />Open Source<BR />K8S</FONT>>, 
                                   group=ninja_components]

              keycloak [label=<keykloak<BR /><FONT POINT-SIZE="10">ask: Aliaksandr Kolesen<BR />Identity and access management<BR />Open Source<BR />K8S</FONT>>,
                                      group=users_components]
              

              "disaster-ninja-fe" [label=<disaster-ninja-fe<BR /><FONT POINT-SIZE="10">ask: Viachaslau Kozel<BR />K8S<BR />Open Source</FONT>>,
                                    group=ninja_components]
 
              "basemap tiles"  [label=<basemap tiles<BR /><FONT POINT-SIZE="10">ask: Darafei Praliaskouski</FONT>>] // updated 2024-07-11

              graphqlapi [label=<GraphQL API<BR /><FONT POINT-SIZE="10">ask: Palina Krukovich<BR />service to calculate analytics for geometry<BR />K8S</FONT>>, 
                            style=dashed, fillcolor=white, group=insights_components]

              eventapi [label=<eventapi<BR /><FONT POINT-SIZE="10">ask: Palina Krukovich<BR />disasters events API</FONT>>,
                                      group=events_components]
              "epig" [label=<event-preview-image-generator<BR /><FONT POINT-SIZE="10">Preview generator for platform links integration<BR />K8S</FONT>>,
                      group=epig]
            }

            subgraph iw_epig { 
              node[group=epig_components]
              "epig-chrome"
              "epig-redis"
            }

            subgraph iw_apis {
              rank = same

              subgraph iw_layers {
                node[group=layers_components]
                "layers-tiles-api" [label=<Layers Tiles API<BR /><FONT POINT-SIZE="10">ask: Andrei Valasiuk<BR />tiles API of Layers-DB<BR />K8S</FONT>>]
                "layers-api"       [label=<Layers API<BR /><FONT POINT-SIZE="10">ask: Andrei Valasiuk<BR />OGC-API of Layers-DB<BR />K8S</FONT>>]
              }

              subgraph iw_users {
                node[group=users_components]
                "user-profile-api" [label=<user-profile-api<FONT POINT-SIZE="10"><BR />ask: Palina Krukovich<BR />user management service API<BR />K8S</FONT>>]

                "user-profile-spi-plugin" [label=<user-profile-spi-plugin<FONT POINT-SIZE="10"><BR />ask: Aliaksandr Kolesen<BR />K8S</FONT>>]
              }

              subgraph iw_insights {
                node[group=insights_components]
                insightsapi [label=<Insights API<BR /><FONT POINT-SIZE="10">ask: Palina Krukovich<BR />service to calculate analytics for geometry<BR />K8S</FONT>>]
                "insights-llm-api" [label=<insights-llm-api<BR /><FONT POINT-SIZE="10">ask: Nadzeya Laptsik<BR />service providing analytics from LLM<BR />K8S</FONT>>]
              }

           }

            subgraph iw_databases {
              rank=same
              node[shape=cylinder]
              "layers-db-database-replica" [label=<Layers-DB database REPLICA<BR /><FONT POINT-SIZE="10">ask: Andrei Valasiuk<BR />store layers for web-applications<BR />K8S</FONT>>,
                                      group=layers_components]
              "user-profile-api-database-replica" [label=<user-profile-api-database REPLICA<FONT POINT-SIZE="10"><BR />ask: Palina Krukovich<BR />store application settings for users<BR />K8S</FONT>>,
                                            group=users_components]
              "insightsapi-database-replica" [label=<InsightsAPI-database REPLICA<FONT POINT-SIZE="10"><BR />ask: Nadzeya Laptsik<BR />store hexagonized datasets<BR />K8S</FONT>>,
                                            group=insights_components]
              "eventapi-database-replica"[group=events_components]
              "keycloak-database-replica"[group=users_components]
            }

            // review: is it correct or more complicated? e.g. is epig involved?
            "minio-tenant"[fillcolor=white,color=orange]
            "basemap tiles" -> "minio-tenant"[color=orange]

          } // interactive workloads

          subgraph noninteractive_workloads {
            subgraph nw_observability {
              node[group=observability_components]
              rank=same
              "prometheus02" [label=<prometheus02<BR /><FONT POINT-SIZE="10">ask: Eugene Karpach<BR />collects cluster/app metrics in K8S<BR />K8S</FONT>>]
              "grafana02" [label=<grafana02<BR /><FONT POINT-SIZE="10">ask: Eugene Karpach<BR />main monitoring solution in K8S<BR />K8S</FONT>>]
              "fluent-bit" [label=<fluent-bit<FONT POINT-SIZE="10"><BR />ask: Eugene Karpach<BR />collects all logs in K8S<BR />K8S</FONT>>]
            }

            subgraph nw_etl {
              rank=same
              "insights-db" [label=<insights-db<BR /><FONT POINT-SIZE="10">ask: Nadzeya Laptsik<BR />Insights API orchestrator<BR />K8S<br/>k8s name: insights-api-db-svc</FONT>>,
                              group=insights_components]
              "layers-db" [label=<Layers-DB<BR /><FONT POINT-SIZE="10">ask: Andrei Valasiuk<BR />(ETL) prepare layers data for applications<BR />K8S</FONT>>,
                              group=layers_components]
            }

            subgraph nw_databases {
              rank=same
              node[shape=cylinder]
              "layers-db-database" [label=<Layers-DB database<BR /><FONT POINT-SIZE="10">ask: Andrei Valasiuk<BR />store layers for web-applications<BR />K8S</FONT>>,
                                      group=layers_components]
              "user-profile-api-database" [label=<user-profile-api-database<FONT POINT-SIZE="10"><BR />ask: Palina Krukovich<BR />store application settings for users<BR />K8S</FONT>>,
                                            group=users_components]
              "insightsapi-database" [label=<InsightsAPI-database<FONT POINT-SIZE="10"><BR />ask: Nadzeya Laptsik<BR />store hexagonized datasets<BR />K8S</FONT>>,
                                            group=insights_components]
              "eventapi-database"[group=events_components,style=filled,fillcolor=red]
              "keycloak-database"[group=users_components,style=filled,fillcolor=red]
  
            }
          }

          


         subgraph db_replication {
            edge[dir=back]
            "layers-db-database-replica" -> "layers-db-database"
            "user-profile-api-database-replica" -> "user-profile-api-database"
            "insightsapi-database-replica" -> "insightsapi-database"
            "eventapi-database-replica" -> "eventapi-database"
            "keycloak-database-replica" -> "keycloak-database"
         }

         subgraph events_flow {
           eventapi -> "eventapi-database-replica"[color=orange]
           eventapi -> "eventapi-database"[color=red]
         }

         subgraph users_flow {
           keycloak -> "keycloak-database-replica"[color=orange]
           keycloak -> "keycloak-database"[color=red]

           keycloak -> "user-profile-spi-plugin"[color=red]
           "user-profile-api" -> "user-profile-api-database-replica"[color=red]
           "user-profile-api" -> "user-profile-api-database"
           "user-profile-spi-plugin" -> "user-profile-api-database-replica"[color=red]
           "user-profile-spi-plugin" -> "user-profile-api-database"

         }

         subgraph layers_flow {
           "layers-api" -> "layers-db-database-replica"[color=red]
           "layers-tiles-api" -> "layers-db-database-replica"[color=red]
           "layers-db-database" -> "layers-db"[dir=back]
           "disaster-ninja-be" -> "layers-db" // add changes from smartcity and roadapp
         }

         subgraph insights_flow {

          insightsapi -> "insightsapi-database-replica"[color=red]
          insightsapi -> "insightsapi-database" // does it perform writes?
          "insights-llm-api" -> "insightsapi-database-replica"[color=red]
          "insights-llm-api" -> "insightsapi-database"
          "insights-llm-api" -> "user-profile-api"[color=red]
          "insights-llm-api" -> insightsapi[color=red]
          "insightsapi-database" -> "insights-db"[dir=back]
          "insights-db" -> "layers-db"[dir=back]

         }

      }

      subgraph cluster_geocint {
          label=<Geocint ETL pipeline<BR /><FONT POINT-SIZE="10">ask: Andrei Valasiuk</FONT>>
          style=bold

          "geocint-runner" [label=<geocint-runner<BR /><FONT POINT-SIZE="10">ask: Andrei Valasiuk<BR />core part<BR />open source</FONT>>]
          "geocint-openstreetmap" [label=<geocint-openstreetmap<BR /><FONT POINT-SIZE="10">ask: Andrei Valasiuk<BR />OSM-related targets<BR />open source</FONT>>]
          "geocint-kontur" [label=<geocint-kontur<BR /><FONT POINT-SIZE="10">ask: Andrei Valasiuk<BR />Kontur's private part</FONT>>]
          geocint [label=<Geocint Pipeline<BR /><FONT POINT-SIZE="10">ask: Andrei Valasiuk<BR />Kontur's data pipeline</FONT>>]
          isochroneapi [label=<IsochroneAPI<BR /><FONT POINT-SIZE="10">ask: Andrei Valasiuk</FONT>>]

          subgraph geocint_osrm_containers {
              // rank=same
              node[shape=pentagon,style=filled,fillcolor=red]

              osrmemergencyminsk [label=<osrmemergencyminsks<BR /><FONT POINT-SIZE="10">ask: Darafei Praliakouski</FONT>>]
              osrmdistanceminsk [label=<osrmdistanceminsks<BR /><FONT POINT-SIZE="10">ask: Darafei Praliakouski</FONT>>]
              osrmdocker_motobike [label=<osrmdocker_motobike<BR /><FONT POINT-SIZE="10">ask: Andrei Valasiuk<BR />geocint-based osrm backend</FONT>>]
              osrmdocker_foot [label=<osrmdocker_foot<BR /><FONT POINT-SIZE="10">ask: Andrei Valasiuk<BR />geocint-based osrm backend</FONT>>]
              osrmdocker_emergency [label=<osrmdocker_emergency<BR /><FONT POINT-SIZE="10">ask: Andrei Valasiuk<BR />geocint-based osrm backend</FONT>>]
              osrmdocker_bicycle [label=<osrmdocker_bicycle<BR /><FONT POINT-SIZE="10">ask: Andrei Valasiuk<BR />geocint-based osrm backend</FONT>>]
              osrmdocker_car [label=<osrmdocker_car<BR /><FONT POINT-SIZE="10">ask: Andrei Valasiuk<BR />geocint-based osrm backend</FONT>>]
          }

          subgraph geocint_datasets {          
            // rank = same
            node[shape=rectangle,style=filled,fillcolor=lightskyblue]

            subgraph geocint_datasets_global {
              osmroadsegments [label=<OSM Road Segments<BR /><FONT POINT-SIZE="10">ask: Andrei Valasiuk</FONT>>]
              konturpopulation [label=<Kontur Population<BR /><FONT POINT-SIZE="10">ask: Andrei Valasiuk</FONT>>]
              kontur_boundaries [label=<Kontur Boundaries<BR /><FONT POINT-SIZE="10">ask: Andrei Valasiuk<BR />global boundary dataset</FONT>>]
              osmcontributorstiles [label=<OSM Active Contributors<BR /><FONT POINT-SIZE="10">ask: Andrei Valasiuk</FONT>>]
            }
            subgraph geocint_datasets_minsk {
              addressesminsk [label=<OSM Addresses Minsk<BR /><FONT POINT-SIZE="10">ask: Andrei Valasiuk<BR />Adresses for Minskfire routing</FONT>>    ]
              buildingsminsk [label=<OSM Buildings Minsk<BR /><FONT POINT-SIZE="10">ask: Andrei Valasiuk<BR />Buildings for Minskfire routing</FONT>>]
              belarusosmpbf [label=<OSM Belarus extract<BR /><FONT POINT-SIZE="10">ask: Andrei Valasiuk</FONT>>]
              pdsdataset  [label=<OSM_extract_Belarus_Kosovo_UAE_USA<BR />Geocint-based OSRM backend<BR /><FONT POINT-SIZE="10">ask: Andrei Valasiuk</FONT>>]//Area of interest updated 2024-30-01
            }
          }
      } 

    }

    // prevent observability group from being considered 'source', popping whole graph up
    "layers-db" -> "fluent-bit"[style=invis]
    "insights-db" -> "fluent-bit"[style=invis]
    
    //"nginx-ingress-controller" -> graphqlapi[style=invis]

    k2geocoder -> osmnominatim [color=purple]


    "basemap tiles" -> geocint


    subgraph dn_connections {
    
     subgraph dn_ingress {
      "nginx-ingress-controller" -> "disaster-ninja-fe"[color=red] 
      "nginx-ingress-controller" -> "disaster-ninja-be" [color=red]
     }

     subgraph dn_fe_connections {
      "disaster-ninja-fe" -> "disaster-ninja-be"[color=red]
      "disaster-ninja-fe" -> "layers-tiles-api"[color=red]
      "disaster-ninja-fe" -> insightsapi[color=red]
      "disaster-ninja-fe" -> "basemap tiles"[color=red,constraint=false]
      "disaster-ninja-fe" -> kontur_boundaries
      "disaster-ninja-fe" -> OSM_quality_report
     }

     subgraph dn_be_connections {
      "disaster-ninja-be" -> "user-profile-api"[color=red]
      "disaster-ninja-be" -> insightsapi[color=red]
      "disaster-ninja-be" -> "insights-llm-api"[color=red]
      "disaster-ninja-be" -> kcapi[color=red]
      "disaster-ninja-be" -> eventapi[color=red]
      "disaster-ninja-be" -> "layers-api"[color=red]
     }

      graphqlapi -> insightsapi[style=dashed]
    
    
    }

    subgraph epig_flow {
      edge[color=red]
      "HOT Slack" -> "disaster-ninja-be"[color=black,dir=back] // push to Slack
      "HOT Slack" -> "disaster-ninja-fe"                       // get epig link
      "HOT Slack" -> "epig"                                    // preview request
      "epig" -> "epig-chrome" -> previewapp
      "epig" -> "epig-redis"
    }
  
    subgraph keycloak_client_connections {
      edge[color=red]
      //roadqualityapp -> keycloak[color=red]
      //disasterninja -> keycloak[color=red]
      "nginx-ingress-controller" -> keycloak // in fact, all client apps

      public_event_feed_users -> keycloak    // keycloak for public access?

      eventapi -> keycloak[constraint=false]
      mailchimp -> keycloak[color=orange,constraint=false] // TBD
    }



    SwissRe -> geoalertbuildings [style=dashed]
    SwissRe -> eventapiprod [style=dashed]


    "layers-db" -> hotactivations
    "layers-db" -> osmcontributorstiles
    "layers-db" -> unhcrukrainerefugee
    "layers-db" -> idpestimates
    "layers-db" -> osmlayers
    

    gdacs -> jrc[constraint=false]
    ghs -> jrc
    facebookpopulation -> facebook
    facebookroads -> facebook


    subgraph client_apps {


        subgraph same_ranked_client_apps {
          rank=same;

          {
            node[shape=octagon]
            eventapiprod [label=<apps.kontur.io/events/<BR /><FONT POINT-SIZE="10">API endpoint with events<BR />ask: Palina Krukovich</FONT>>,
                              style=filled,fillcolor=deeppink]

            "Unfolded Data Catalog"[label=<Unfolded Data Catalog/<BR /><FONT POINT-SIZE="10">Third-party, not managed by us</FONT>>,
                                    color="#00000075",
                                    fontcolor="#00000075",
                                    group=Unfolded]
          }

          {
            node[shape=ellipse]

            {
              donerkingapp [label="apps.kontur.io/donerking/",group="donerking"]
              mchsapp [label="apps.kontur.io/firebrigade/minsk/",group="firebrig"]
            }

            {
              konturwebsite [label="kontur.io/",group=konturwebsite]

              atlasapp [label="atlas.kontur.io"]
              oasisapp [label="oasis.kontur.io"]
              previewapp[label="Preview"]
            }

            {
              hotlandingpage [label="apps.kontur.io/hot-activations-landing/",group="hot"]
              "HOT Slack" [group="hot"]
              oam [label=<new.openaerialmap.org/<BR /><FONT POINT-SIZE="10">Demo application of OAM new version</FONT>>,group="hot"]
            }


            {
              roadqualityapp [label=<Road quality mobile app<BR /><FONT POINT-SIZE="10">ask: Andrei Valasiuk</FONT>>,group="donkor"]
              smartcity [label=<Smart City App<BR />maps.kontur.io>,group="donkor"]
            }

            solarfarm [label=<Solar Farms marketing App<BR /><FONT POINT-SIZE="10">ask: Andrei Valasiuk</FONT>>]
            embeddedpop [label=<Kontur Population marketing App<BR /><FONT POINT-SIZE="10">ask: Andrei Valasiuk</FONT>>,group="HDX"]
            embeddeddisaster [label=<Embedded disaster App<BR /><FONT POINT-SIZE="10">ask: Andrei Valasiuk</FONT>>]

          }
        }

        subgraph special_client_app {
          node[shape=ellipse]
          disasterninja [label="disaster.ninja/"]
        }
    }

    Unfolded -> "Unfolded Data Catalog"[color="#00000075"] //updated 2021-10-08

    Sunbim -> solarfarm

    DonkorLabs -> smartcity
    DonkorLabs -> roadqualityapp

    PDC -> "basemap tiles"[color=red] // updated 2024-07-11

    { //// to be removed unless these apps really communicate with disaster.ninja somehow
      //embeddedpop -> disasterninja
      //embeddeddisaster -> disasterninja
      //oam -> disasterninja
      //smartcity -> disasterninja
      //solarfarm -> disasterninja

    }


    subgraph apps_to_ingress {
      edge[color=red]

      // TBD: eliminate ingress-controller and draw connections to [fe,be,keycloak]?

      embeddedpop -> "nginx-ingress-controller"
      embeddeddisaster -> "nginx-ingress-controller"
      oam -> "nginx-ingress-controller"

      // includes pushing data for layers database through disaster-ninja-be
      roadqualityapp -> "nginx-ingress-controller"
      smartcity -> "nginx-ingress-controller"

      solarfarm -> "nginx-ingress-controller"
      disasterninja -> "nginx-ingress-controller"

      atlasapp -> "nginx-ingress-controller"
      oasisapp -> "nginx-ingress-controller"
      previewapp -> "nginx-ingress-controller"

      // roadquality and smartcity are pushing data for layers through disaster-ninja-be
    }

    public_event_feed_users -> eventapi[color=red]
    public_event_feed_users -> atlasapp[color=red]
    HOT -> disasterninja
    HOT -> hotlandingpage //new
    HOT -> "HOT Slack"
    HOT -> oam
    HOT -> graphqlapi // pull data for their ETL
    Kontur -> solarfarm
    Kontur -> embeddeddisaster
    Kontur -> atlasapp
    Kontur -> oasisapp
    
    "Unfolded Data Catalog" -> "basemap tiles"[color=red] //updated 2021-10-08

    "13 months of Fires" [label=<13 months of Fires>,shape=rectangle,style=filled,fillcolor=lightskyblue]
    cartocatalog -> "13 months of Fires"//updated 2021-10-08
    cartocatalog -> geocint //updated 2021-10-08

    eventapiprod -> eventapi[color=deeppink]
    hotlandingpage -> kcapi //new
    CSTAPP [label=<City Split Tool app<BR /><FONT POINT-SIZE="10">ask: Tigran Grigoryan</FONT>>,style=filled,fillcolor=red]
    mchs -> CSTAPP[color=purple]
    DonerKing -> CSTAPP [color=purple]

    CSTAPP -> citysplit[color=red]
    isochroneapi[style=filled,fillcolor=red]
    citysplit -> isochroneapi[color=red]
    
    konturpopulation -> insightsapi // updated 2021-10-08
    isochroneapi -> insightsapi[color=red] //new
    eventapi -> insightsapi[color=red] //new

    subgraph geocint_insights_data_push {
      // updated 2024-07-16
      // edges mark dependency, data flow is reversed
      edge[dir=back,decorate=true]
      "insightsapi-database" -> geocint[label="prod: push db dump" ]
      insightsapi -> geocint[label="dev/test: data push via API"]
    }

    isochroneapi -> osmroadsegments
    osmroadsegments -> geocint
    buildingsminsk -> geocint
    osmcontributorstiles -> geocint
    addressesminsk -> geocint
    belarusosmpbf -> geocint
    pdsdataset -> geocint //updated 2021-10-08
    osrmdocker_foot -> pdsdataset //updated 2021-10-08
    osrmdocker_bicycle -> pdsdataset //updated 2021-10-08
    osrmdocker_car -> pdsdataset //updated 2021-10-08
    osrmdocker_emergency -> pdsdataset //updated 2021-10-08
    osrmdocker_motobike -> pdsdataset //updated 2021-10-08
    isochroneapi -> osrmdocker_foot[color=red]  //updated 2021-10-08
    isochroneapi -> osrmdocker_bicycle[color=red] //updated 2021-10-08
    isochroneapi -> osrmdocker_car[color=red] //updated 2021-10-08
    isochroneapi -> osrmdocker_emergency[color=red] //updated 2021-10-08
    isochroneapi -> osrmdocker_motobike[color=red]   //updated 2021-10-08

    osrmemergencyminsk -> belarusosmpbf
    osrmdistanceminsk -> belarusosmpbf
    konturpopulation -> geocint
    HDX -> konturpopulation
    HDX -> kontur_boundaries
    HDX -> embeddedpop



    "geocint-runner" -> geocint
    "geocint-openstreetmap" -> geocint
    "geocint-kontur" -> geocint
    "layers-api" -> geocint
    geocint -> osm[constraint=false]
    geocint -> facebookpopulation
    facebookpopulation -> gadm
    geocint -> gadm
    geocint -> ghs
    geocint -> facebookroads
    geocint -> msbuildings
    geocint -> geoalertbuildings[constraint=false]
    geocint -> wikidata
    geocint -> linz

    kontur_boundaries -> geocint //updates 2021-10-08
    OSM_quality_report -> geocint //updated 2021-10-08 Sasha Petrov
    osmboundaries -> geocint

    kccitysplitfe -> isochroneapi [color=purple]
    CSTAPP -> kccitysplitfe [color=purple]


    // lets use deeppink for outdated+interactive
    eventapi -> gdacs[color=blue]
    eventapi -> firms[color=blue] //new
    eventapi -> noaa[color=blue] //new
    eventapi -> emdat[color=blue] //new
    eventapi -> japantornado[color=blue] //new
    eventapi -> kcapi[color=red,constraint=false]

  
    DonerKing -> donerkingapp
    donerkingapp -> kcdonerkingfe [color=purple]
    kcdonerkingfe -> kcdonerking [color=purple]
    kcdonerking -> buildingsminsk[color=purple]
    kcdonerking -> kcdataetl [color=purple]


    kcdataetl -> hotactivations [color=purple,constraint=false]
    kcdataetl -> hotactivationscsv [color=purple]
    kcdataetl -> osmcommunities [color=purple]
    kcdataetl -> osmlayers [color=purple,constraint=false]
    kcdataetl -> k2etl [color=purple]
    kcdataetl -> osmboundaries [color=purple]
    kcdataetl -> firehydrants [color=purple]
   
    mchs -> mchsapp
    mchsapp -> kcfirebrigadefe [color=purple]
    kcfirebrigadefe -> kcfirebrigade [color=purple]
    kcfirebrigade -> kcdataetl [color=purple]

    kcapi [color=purple]
    kcdonerking -> kcapi [color=purple]
    kcfirebrigade -> kcapi [color=purple]

    pdcsqs [label=<PDC SQS Feed<BR /><FONT POINT-SIZE="10">ask: Palina Krukovich<BR />Simple Queue Service</FONT>>]
    pdcmapservices 
 
    eventapi -> pdcsqs[constraint=false]
    eventapi -> pdcmapservices[constraint=false]
    pdcsqs -> pdcdisasters
    pdcmapservices-> pdcdisasters


    kcapi -> k2layers [color=purple]
    k2layers -> "kcapi db" [color=purple]
    k2geocoder -> "kcapi db" [color=purple]
    "kcapi db" -> kcdataetl [color=purple]
    // minskfiredemo <- is no more as of 2024/07/15, kept for reference, could be removed eventually 
    k2routing [color=purple]
    kcapi -> k2routing [color=purple]
    k2routing -> osm [color=purple]
    k2routing -> osrmemergencyminsk [color=purple]
    k2routing -> osmboundaries [color=purple] // accoring to A.Kalenik
    osrmemergencyminsk -> osm[color=blue]
    k2routing -> osrmdistanceminsk [color=purple]
    osrmdistanceminsk -> osm[color=blue]
    k2geocoder [color=purple]
    kcapi -> k2geocoder [color=purple]
    k2geocoder -> osm [color=purple]
    k2geocoder -> kcdataetl [color=purple]
    kcdonerkingfe -> k2frontend [color=purple]
    kcfirebrigadefe -> k2frontend [color=purple]
    kccitysplitfe -> k2frontend [color=purple]

    subgraph cluster_PDC {
        label=<PDC<BR /><FONT POINT-SIZE="10">ask: Anastasia Artyukevich</FONT>>
        style=bold
        color="#00000075"
        fontcolor="#00000075"

        node[color="#00000075",fontcolor="#00000075"]
        edge[color="#00000075"]

        pdcrvaeditorfe        
        pdceventbrieffe        
        pdchazardbrief        
        pdcdas        
        pdctrafficcams 
        DASv4          
        UserManagement
        DisasterAware7
        pdccmdp   
        OrgAPI
        JWT

    }

    {
      edge[color="#00000075"]
      PDC -> pdcrvaeditorfe
      PDC -> pdceventbrieffe
      PDC -> pdchazardbrief
      PDC -> pdcdas
      PDC -> pdctrafficcams
      PDC -> UserManagement         // update 2021-10-8
      PDC -> DisasterAware7 -> JWT -> OrgAPI // update 2021-10-8
      PDC -> DASv4 // update 2021-10-8
      PDC -> pdccmdp -> pdctrafficcams
      pdceventbrieffe -> pdctrafficcams
      pdceventbrieffe -> pdcrvaeditorfe
      pdchazardbrief -> pdcdas
      UserManagement -> OrgAPI // update 2021-10-8
      UserManagement -> JWT
    }

    pdceventbrieffe -> pdcdisasters
    pdchazardbrief -> pdcdisasters
    pdcdas -> pdcdisasters
    Tenefit -> OrgAPI // update 2021-10-8
    Tenefit -> DASv4 // update 2021-10-8
    Kontur -> DASv4 // update 2021-10-8

    subgraph kontur_website_stack {
      wordpress [label=<Wordpress<BR /><FONT POINT-SIZE="10">ask: Aleksey Tarakanov</FONT>>,group=konturwebsite]
      mailchimp [group=konturwebsite]
      Kontur -> konturwebsite -> wordpress -> mailchimp
    }


    "prometheus02" -> grafana02
    kibana [label=<Kibana/ElasticCloud<BR /><FONT POINT-SIZE="10">ask: Anastasia Artyukevich<BR />Data visualization dashboard for Elasticsearch</FONT>>]
    
    // for clarity we suppress Kontur-kibana/grafana links. Its kind of obvious we use them 
    Kontur -> grafana02[style=invis]
    Kontur -> kibana[style=invis] //updated 2021-10-08
   
    eventapi -> kibana//updated 2021-10-08
    isochroneapi -> kibana//updated 2021-10-08
    "fluent-bit" -> kibana
    

}
